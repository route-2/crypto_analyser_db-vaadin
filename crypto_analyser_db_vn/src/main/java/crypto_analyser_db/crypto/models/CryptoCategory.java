package crypto_analyser_db.crypto.models;

import jakarta.persistence.*;
import java.util.Set;

/**
 * The CryptoCategory class represents a category for cryptocurrencies.
 * Examples of categories include "Stablecoin", "Utility", and "Payment".
 * This class is mapped to the "crypto_category" table in the database.
 */
@Entity
@Table(name = "crypto_category")
public class CryptoCategory {

    /**
     * The unique identifier for the CryptoCategory.
     * This field is auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    /**
     * The name of the category (deprecated; use categoryName).
     * This field is not used but kept for reference.
     */
    private String name;

    /**
     * The name of the category, must be unique and not null.
     */
    @Column(name = "category_name", nullable = false, unique = true)
    private String categoryName;

    /**
     * A set of CryptoModel instances that belong to this category.
     * The relationship is defined as a one-to-many mapping.
     */
    @OneToMany(mappedBy = "category", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private Set<CryptoModel> cryptocurrencies;

    /**
     * Default constructor for the CryptoCategory class.
     */
    public CryptoCategory() {}

    /**
     * Constructor for creating a CryptoCategory with a specified category name.
     * 
     * @param categoryName the name of the category to be assigned
     */
    public CryptoCategory(String categoryName) {
        this.categoryName = categoryName;
    }

    /**
     * Gets the unique identifier for the category.
     * 
     * @return the unique identifier of the category
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the unique identifier for the category.
     * 
     * @param id the unique identifier to set
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the name of the category.
     * 
     * @return the name of the category
     */
    public String getCategoryName() {
        return categoryName;
    }

    /**
     * Sets the name of the category.
     * 
     * @param categoryName the name to set for the category
     */
    public void setCategoryName(String categoryName) {
        this.categoryName = categoryName;
    }

    /**
     * Gets the set of cryptocurrencies that belong to this category.
     * 
     * @return a set of CryptoModel instances in this category
     */
    public Set<CryptoModel> getCryptocurrencies() {
        return cryptocurrencies;
    }

    /**
     * Sets the set of cryptocurrencies that belong to this category.
     * 
     * @param cryptocurrencies the set of CryptoModel instances to set
     */
    public void setCryptocurrencies(Set<CryptoModel> cryptocurrencies) {
        this.cryptocurrencies = cryptocurrencies;
    }
}
